// components/MetricCard.js
export default function MetricCard({ title, value }) {
  return (
    <div className="bg-gray-800 rounded-lg p-4 flex flex-col items-center">
      <h3 className="text-gray-300 text-sm">{title}</h3>
      <p className="text-3xl font-bold text-primary mt-2">{value}</p>
    </div>
  );
}
// components/SearchBar.js
import { FaSearch } from 'react-icons/fa';

export default function SearchBar({ searchTerm, setSearchTerm }) {
  return (
    <div className="relative mb-4">
      <input
        type="text"
        placeholder="Search by Store Number"
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        className="w-full bg-gray-700 text-white border border-gray-600 rounded pl-10 pr-4 py-2 focus:outline-none focus:border-primary"
      />
      <FaSearch className="absolute left-3 top-3 text-gray-400" />
    </div>
  );
}

// pages/index.js
import { useState, useEffect } from 'react';
import Layout from '../components/Layout';
import MetricCard from '../components/MetricCard';
import DataTable from '../components/DataTable';
import SearchBar from '../components/SearchBar';

export default function Dashboard() {
  const [stores, setStores] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [metrics, setMetrics] = useState({
    hardwareAcquired: 0,
    softwareInstalled: 0,
    inProgress: 0,
    live: 0,
  });
  const [filteredStores, setFilteredStores] = useState([]);

  useEffect(() => {
    fetch('/api/stores')
      .then((res) => res.json())
      .then((data) => {
        setStores(data);
        calculateMetrics(data);
        setFilteredStores(data);
      });
  }, []);

  useEffect(() => {
    const filtered = stores.filter((store) =>
      store.storeNumber.toString().includes(searchTerm)
    );
    setFilteredStores(filtered);
  }, [searchTerm, stores]);

  const calculateMetrics = (data) => {
    const metricsData = data.reduce(
      (acc, store) => {
        switch (store.overallStatus) {
          case 'Hardware Acquired':
            acc.hardwareAcquired += 1;
            break;
          case 'Software Installed':
            acc.softwareInstalled += 1;
            break;
          case 'In-progress':
            acc.inProgress += 1;
            break;
          case 'Live':
            acc.live += 1;
            break;
          default:
            break;
        }
        return acc;
      },
      {
        hardwareAcquired: 0,
        softwareInstalled: 0,
        inProgress: 0,
        live: 0,
      }
    );

    setMetrics(metricsData);
  };

  return (
    <Layout>
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <MetricCard title="Hardware Acquired" value={metrics.hardwareAcquired} />
        <MetricCard title="Software Installed" value={metrics.softwareInstalled} />
        <MetricCard title="In-progress" value={metrics.inProgress} />
        <MetricCard title="Live" value={metrics.live} />
      </div>
      <SearchBar searchTerm={searchTerm} setSearchTerm={setSearchTerm} />
      <div className="bg-gray-800 rounded-lg p-6">
        <DataTable stores={filteredStores} />
      </div>
    </Layout>
  );
}


// components/Header.js
import { FaBars, FaUserCircle } from 'react-icons/fa';

export default function Header({ toggleSidebar }) {
  return (
    <header className="flex items-center justify-between px-4 py-2 bg-gray-800">
      <div className="flex items-center">
        <button
          className="text-gray-500 focus:outline-none lg:hidden"
          onClick={toggleSidebar}
        >
          <FaBars className="text-2xl" />
        </button>
        <h1 className="text-2xl font-bold text-white ml-4">Edge Rollout Tracker</h1>
      </div>
      <div className="flex items-center">
        <FaUserCircle className="text-2xl text-white" />
      </div>
    </header>
  );
}
// components/Sidebar.js
import { FaHome, FaStore, FaChartBar, FaMapMarkedAlt } from 'react-icons/fa';
import Link from 'next/link';

export default function Sidebar({ sidebarOpen, toggleSidebar }) {
  const menuItems = [
    { href: '/', icon: <FaHome />, label: 'Dashboard' },
    { href: '/store-onboarding', icon: <FaStore />, label: 'Store Onboarding' },
    { href: '/rollout-status', icon: <FaChartBar />, label: 'Rollout Status' },
    { href: '/statistics', icon: <FaChartBar />, label: 'Statistics' },
    { href: '/map', icon: <FaMapMarkedAlt />, label: 'Map View' },
  ];

  return (
    <div
      className={`fixed inset-y-0 left-0 z-30 w-64 transition duration-300 transform bg-gray-900 overflow-y-auto lg:static lg:inset-0 ${
        sidebarOpen ? 'translate-x-0' : '-translate-x-full'
      }`}
    >
      <div className="flex items-center justify-center mt-8">
        <div className="text-white text-2xl font-semibold">
          Edge Rollout
        </div>
      </div>
      <nav className="mt-10">
        {menuItems.map((item) => (
          <Link href={item.href} key={item.label}>
            <a className="flex items-center px-6 py-2 mt-4 text-gray-100 hover:bg-gray-700 hover:text-white">
              <span className="text-xl">{item.icon}</span>
              <span className="mx-3">{item.label}</span>
            </a>
          </Link>
        ))}
      </nav>
    </div>
  );
}
// components/Layout.js
import { useState } from 'react';
import Sidebar from './Sidebar';
import Header from './Header';

export default function Layout({ children }) {
  const [sidebarOpen, setSidebarOpen] = useState(false);

  const toggleSidebar = () => {
    setSidebarOpen(!sidebarOpen);
  };

  return (
    <div className="flex h-screen overflow-hidden">
      {/* Sidebar */}
      <Sidebar sidebarOpen={sidebarOpen} toggleSidebar={toggleSidebar} />

      {/* Main content area */}
      <div className="relative flex flex-col flex-1 overflow-y-auto overflow-x-hidden bg-dark">
        {/* Header */}
        <Header toggleSidebar={toggleSidebar} />

        {/* Page content */}
        <main className="flex-1">
          <div className="py-6 px-4 sm:px-6 lg:px-8">
            {children}
          </div>
        </main>
      </div>
    </div>
  );
}
