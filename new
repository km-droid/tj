//* _app.tsx

import '@/styles/globals.css'
import type { AppProps } from 'next/app'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { ThemeProvider } from 'next-themes'

const queryClient = new QueryClient()

export default function App({ Component, pageProps }: AppProps) {
  return (
    <QueryClientProvider client={queryClient}>
      <ThemeProvider attribute="class" defaultTheme="system" enableSystem>
        <Component {...pageProps} />
      </ThemeProvider>
    </QueryClientProvider>
  )
}

/* Layout.tsx

import React from 'react'
import Link from 'next/link'
import { useRouter } from 'next/router'
import { useTheme } from 'next-themes'
import { HomeIcon, PlusCircleIcon, ChartBarIcon, DatabaseIcon, SunIcon, MoonIcon } from '@heroicons/react/24/outline'

const menuItems = [
  { name: 'Home', href: '/', icon: HomeIcon },
  { name: 'Onboard a Store', href: '/onboard', icon: PlusCircleIcon },
  { name: 'Stats', href: '/stats', icon: ChartBarIcon },
  { name: 'Seed Database', href: '/seed', icon: DatabaseIcon },
]

export default function Layout({ children }: { children: React.ReactNode }) {
  const router = useRouter()
  const { theme, setTheme } = useTheme()

  return (
    <div className="flex h-screen bg-gray-100 dark:bg-gray-900">
      {/* Sidebar */}
      <div className="hidden md:flex md:flex-shrink-0">
        <div className="flex flex-col w-64">
          <div className="flex flex-col h-0 flex-1 bg-gray-800 dark:bg-gray-800">
            <div className="flex-1 flex flex-col pt-5 pb-4 overflow-y-auto">
              <div className="flex items-center flex-shrink-0 px-4">
                <span className="text-white text-lg font-semibold">Store Rollout App</span>
              </div>
              <nav className="mt-5 flex-1 px-2 space-y-1">
                {menuItems.map((item) => (
                  <Link
                    key={item.name}
                    href={item.href}
                    className={`${
                      router.pathname === item.href
                        ? 'bg-gray-900 text-white'
                        : 'text-gray-300 hover:bg-gray-700 hover:text-white'
                    } group flex items-center px-2 py-2 text-sm font-medium rounded-md`}
                  >
                    <item.icon className="mr-3 flex-shrink-0 h-6 w-6" aria-hidden="true" />
                    {item.name}
                  </Link>
                ))}
              </nav>
            </div>
            <div className="flex-shrink-0 flex border-t border-gray-700 p-4">
              <button
                onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
                className="flex-shrink-0 w-full group block"
              >
                <div className="flex items-center">
                  {theme === 'dark' ? (
                    <SunIcon className="inline-block h-9 w-9 rounded-full text-gray-300" />
                  ) : (
                    <MoonIcon className="inline-block h-9 w-9 rounded-full text-gray-300" />
                  )}
                  <div className="ml-3">
                    <p className="text-sm font-medium text-gray-300 group-hover:text-white">
                      {theme === 'dark' ? 'Switch to Light Mode' : 'Switch to Dark Mode'}
                    </p>
                  </div>
                </div>
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Main content */}
      <div className="flex flex-col w-0 flex-1 overflow-hidden">
        <main className="flex-1 relative z-0 overflow-y-auto focus:outline-none">
          <div className="py-6">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 md:px-8">
              {children}
            </div>
          </div>
        </main>
      </div>
    </div>
  )
}

/** id,tsx



import { useRouter } from 'next/router'
import { useQuery } from '@tanstack/react-query'
import { getStore, getRolloutTasks, getHardwareInventory, getSoftwareInstallations } from '@/lib/api'
import Layout from '@/components/Layout'
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"

export default function StoreDetails() {
  const router = useRouter()
  const { id } = router.query

  const { data: store, isLoading: storeLoading } = useQuery({
    queryKey: ['store', id],
    queryFn: () => getStore(id as string),
    enabled: !!id,
  })

  const { data: tasks } = useQuery({
    queryKey: ['rolloutTasks', id],
    queryFn: () => getRolloutTasks(id as string),
    enabled: !!id,
  })

  const { data: hardware } = useQuery({
    queryKey: ['hardwareInventory', id],
    queryFn: () => getHardwareInventory(id as string),
    enabled: !!id,
  })

  const { data: software } = useQuery({
    queryKey: ['softwareInstallations', id],
    queryFn: () => getSoftwareInstallations(id as string),
    enabled: !!id,
  })

  if (storeLoading) return <Layout><div>Loading...</div></Layout>
  if (!store) return <Layout><div>Store not found</div></Layout>

  const phases = [
    { name: 'Hardware Requested', status: hardware && hardware.length > 0 ? 'complete' : 'yet-to-start' },
    { name: 'Hardware Delivered', status: hardware && hardware.every(item => item.status === 'Installed') ? 'complete' : hardware && hardware.some(item => item.status === 'Installed') ? 'in-progress' : 'yet-to-start' },
    { name: 'Software Install', status: software && software.length > 0 ? (software.every(item => item.status === 'Installed') ? 'complete' : 'in-progress') : 'yet-to-start' },
    { name: 'Live', status: store.status === 'Completed' ? 'complete' : store.status === 'In Progress' ? 'in-progress' : 'yet-to-start' },
  ]

  return (
    <Layout>
      <div className="p-6 space-y-6">
        <Card className="bg-background border-border">
          <CardHeader>
            <CardTitle className="text-foreground">{store.name}</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-muted-foreground">{store.address.street}, {store.address.city}, {store.address.state} {store.address.zipcode}</p>
          </CardContent>
        </Card>

        <Card className="bg-background border-border">
          <CardHeader>
            <CardTitle className="text-foreground">Rollout Progress</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex justify-between items-center">
              {phases.map((phase, index) => (
                <TooltipProvider key={phase.name}>
                  <Tooltip>
                    <TooltipTrigger>
                      <div className="flex flex-col items-center">
                        <div 
                          className={`w-8 h-8 rounded-full mb-2 ${
                            phase.status === 'complete' ? 'bg-green-500' :
                            phase.status === 'in-progress' ? 'bg-yellow-500' :
                            'bg-gray-600'
                          }`}
                        />
                        <div className="text-xs text-center max-w-[80px] text-muted-foreground">{phase.name}</div>
                      </div>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>{phase.status === 'complete' ? 'Complete' : 
                          phase.status === 'in-progress' ? 'In Progress' : 
                          'Yet to Start'}</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              ))}
            </div>
            <div className="mt-4 h-2 bg-gray-600 rounded-full">
              <div 
                className="h-full bg-green-500 rounded-full"
                style={{ width: `${(phases.filter(p => p.status === 'complete').length / phases.length) * 100}%` }}
              />
            </div>
          </CardContent>
        </Card>

        <h2 className="text-2xl font-bold mt-8 mb-4 text-foreground">Rollout Tasks</h2>
        <div className="bg-background shadow overflow-hidden sm:rounded-md">
          <ul role="list" className="divide-y divide-gray-200 dark:divide-gray-700">
            {tasks?.map((task) => (
              <li key={task.id}>
                <div className="px-4 py-4 sm:px-6">
                  <div className="flex items-center justify-between">
                    <p className="text-sm font-medium text-indigo-600 dark:text-indigo-400 truncate">{task.taskName}</p>
                    <div className="ml-2 flex-shrink-0 flex">
                      <p className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100">
                        {task.status}
                      </p>
                    </div>
                  </div>
                  <div className="mt-2 sm:flex sm:justify-between">
                    <div className="sm:flex">
                      <p className="flex items-center text-sm text-gray-500 dark:text-gray-400">
                        Assigned to: {task.assignedTo}
                      </p>
                    </div>
                    <div className="mt-2 flex items-center text-sm text-gray-500 dark:text-gray-400 sm:mt-0">
                      <p>
                        Due: {new Date(task.dueDate.seconds * 1000).toLocaleDateString()}
                      </p>
                    </div>
                  </div>
                </div>
              </li>
            ))}
          </ul>
        </div>

        <h2 className="text-2xl font-bold mt-8 mb-4 text-foreground">Hardware Inventory</h2>
        <div className="bg-background shadow overflow-hidden sm:rounded-md">
          <ul role="list" className="divide-y divide-gray-200 dark:divide-gray-700">
            {hardware?.map((item) => (
              <li key={item.id}>
                <div className="px-4 py-4 sm:px-6">
                  <div className="flex items-center justify-between">
                    <p className="text-sm font-medium text-indigo-600 dark:text-indigo-400 truncate">{item.itemName}</p>
                    <div className="ml-2 flex-shrink-0 flex">
                      <p className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100">
                        {item.status}
                      </p>
                    </div>
                  </div>
                  <div className="mt-2 sm:flex sm:justify-between">
                    <div className="sm:flex">
                      <p className="flex items-center text-sm text-gray-500 dark:text-gray-400">
                        Quantity: {item.quantity}
                      </p>
                    </div>
                    <div className="mt-2 flex items-center text-sm text-gray-500 dark:text-gray-400 sm:mt-0">
                      <p>
                        Type: {item.itemType}
                      </p>
                    </div>
                  </div>
                </div>
              </li>
            ))}
          </ul>
        </div>

        <h2 className="text-2xl font-bold mt-8 mb-4 text-foreground">Software Installations</h2>
        <div className="bg-background shadow overflow-hidden sm:rounded-md">
          <ul role="list" className="divide-y divide-gray-200 dark:divide-gray-700">
            {software?.map((installation) => (
              <li key={installation.id}>
                <div className="px-4 py-4 sm:px-6">
                  <div className="flex items-center justify-between">
                    <p className="text-sm font-medium text-indigo-600 dark:text-indigo-400 truncate">{installation.softwareName}</p>
                    <div className="ml-2 flex-shrink-0 flex">
                      <p className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100">
                        {installation.status}
                      </p>
                    </div>
                  </div>
                  <div className="mt-2 sm:flex sm:justify-between">
                    <div className="sm:flex">
                      <p className="flex items-center text-sm text-gray-500 dark:text-gray-400">
                        Version: {installation.version}
                      </p>
                    </div>
                    <div className="mt-2 flex items-center text-sm text-gray-500 dark:text-gray-400 sm:mt-0">
                      <p>
                        Installed: {installation.installationDate ? new Date(installation.installationDate.seconds * 
                        1000).toLocaleDateString() : 'Not installed'}
                      </p>
                    </div>
                  </div>
                </div>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </Layout>
  )
}

//*global.css
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: 0 0% 100%;
  --foreground: 222.2 47.4% 11.2%;
  --muted: 210 40% 96.1%;
  --muted-foreground: 215.4 16.3% 46.9%;
  --border: 214.3 31.8% 91.4%;
  --input: 214.3 31.8% 91.4%;
  --primary: 222.2 47.4% 11.2%;
  --primary-foreground: 210 40% 98%;
  --secondary: 210 40% 96.1%;
  --secondary-foreground: 222.2 47.4% 11.2%;
  --accent: 210 40% 96.1%;
  --accent-foreground: 222.2 47.4% 11.2%;
}

.dark {
  --background: 224 71% 4%;
  --foreground: 213 31% 91%;
  --muted: 223 47% 11%;
  --muted-foreground: 215.4 16.3% 56.9%;
  --border: 216 34% 17%;
  --input: 216 34% 17%;
  --primary: 210 40% 98%;
  --primary-foreground: 222.2 47.4% 1.2%;
  --secondary: 222.2 47.4% 11.2%;
  --secondary-foreground: 210 40% 98%;
  --accent: 216 34% 17%;
  --accent-foreground: 210 40% 98%;
}

body {
  @apply bg-background text-foreground;
}
